#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

using namespace std;

#define SIZE 5	// number of random numbers generated by each program
 
// partition function for quickSort 
int partition (int arr[], int low, int high)
{
    int pivot = arr[high];
    int i = (low - 1);
    int u;
 
    for (int j = low; j <= high- 1; j++)
    {
        if (arr[j] <= pivot)
        {
            i++;
            u = arr[j];
            arr[j] = arr[i];
            arr[i] = u;
        }
    }

    u = arr[high];
    arr[high] = arr[i + 1];
    arr[i + 1] = u;

    return (i + 1);
}
 
// quickSort function 
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// driver sort function that calls quickSort
void sort(int arr[], int s)
{
	quickSort(arr, 0, s-1);
}

// merges two sorted arrays to generate new sorted array
int * mergeArrays(int arr1[], int n1, int arr2[], int n2)
{
	int * arr3 = new int [n1 + n2];

    int i = 0, j = 0, k = 0;

    while (i < n1 && j < n2)
    {
        if (arr1[i] < arr2[j])
            arr3[k++] = arr1[i++];
        else
            arr3[k++] = arr2[j++];
    }

    while (i < n1)
        arr3[k++] = arr1[i++];

    while (j < n2)
        arr3[k++] = arr2[j++];

    return arr3;
}

// merges 3 sorted arrays using mergeArrays
int * merge3Arrays (int a1[], int s1, int a2[], int s2, int a3[], int s3)
{
	return (mergeArrays(mergeArrays (a1, s1, a2, s2), s1 + s2, a3, s3));
}

int main()
{
	int p1[2], p2[2], p3[2];
	int i, j, k, l;
	pipe(p1);
	pipe(p2);
	pipe(p3);

	pid_t x = fork();
	if (x == 0)
	{
		srand(time(0));
		int a[SIZE];
		for (i = 0; i < SIZE; ++i)
			a[i] = (rand() % 1000) + 1;
		sort (a, SIZE);
		write (p1[1], a, sizeof(int) * SIZE);
		close (p1[1]);
		return 0;
	}

	pid_t y = fork();
	if (y == 0)
	{
		srand(time(0) + 1);
		int b[SIZE];
		for (j = 0; j < SIZE; ++j)
			b[j] = (rand() % 1000) + 1;
		sort (b, SIZE);
		write (p2[1], b, sizeof(int) * SIZE);
		close (p2[1]);
		return 0;
	}

	pid_t z = fork();
	if (z == 0)
	{
		srand(time(0) + 2);
		int c[SIZE];
		for (k = 0; k < SIZE; ++k)
			c[k] = (rand() % 1000) + 1;
		sort (c, SIZE);
		write (p3[1], c, sizeof(int) * SIZE);
		close (p3[1]);
		return 0;
	}

	pid_t w = fork();
	if (w == 0)
	{
		int ra[SIZE], rb[SIZE], rc[SIZE];

		read(p1[0], ra, sizeof(int) * SIZE);
		read(p2[0], rb, sizeof(int) * SIZE);
		read(p3[0], rc, sizeof(int) * SIZE);

		close (p1[0]);
		close (p2[0]);
		close (p3[0]);

		cout << "Recieved Array from Program A:\n";
		for (l = 0; l < SIZE; ++l)
			cout << ra[l] << "\t";
		cout << "\n";

		cout << "Recieved Array from Program B:\n";
		for (l = 0; l < SIZE; ++l)
			cout << rb[l] << "\t";
		cout << "\n";

		cout << "Recieved Array from Program C:\n";
		for (l = 0; l < SIZE; ++l)
			cout << rc[l] << "\t";
		cout << "\n";

		int * sorted = merge3Arrays (ra, SIZE, rb, SIZE, rc, SIZE);
		cout << "Sorted Array generated by Program D:\n";
		for (l = 0; l < 3 * SIZE; ++l)
			cout << sorted[l] << "\t";
		cout << "\n";
		return 0;
	}
	return 0;
}